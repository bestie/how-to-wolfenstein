#!/usr/bin/env ruby

require "ruby-prof"
require "time"
require_relative "../game/env"
require "io/console"
require "demo_io_adapter"

$log = File.open("log", "a")
$log.sync = true
$total_frames = 0

levels = Dir
  .glob("game/levels/*.txt")
  .sort
  .map { |filepath| File.read(filepath) }

char_stream = [
  ANSI.right_arrow * 8,
  "w" * 50,
  ANSI.left_arrow * 8,
  "w" * 3,
].join.chars

key_delay = 0.06

IO.console.raw do |io|
  begin
    width = ARGV.fetch(0, io.winsize[1])
    height = ARGV.fetch(1, io.winsize[0])

    demo_io = DemoIOAdapter.new(io, char_stream, delay: key_delay, winsize: [height, width])

    maps = levels.map { |string| Map.from_string(string) }
    tracer = RayTracer.new
    renderer = ANSIRenderer.to_callable_with(tracer: tracer)

    game = Game.new(
      io: demo_io,
      maps: maps,
      player: Player.new(speed: 1.0),
      renderer: renderer,
    )

    RubyProf.start
    game.start
    result = RubyProf.stop

    prof_log = File.open("profs/#{Time.now.iso8601}--#{demo_io.winsize}--#{$total_frames}-frames", "w")
    printer = RubyProf::FlatPrinter.new(result)
    printer.print(prof_log)
  rescue => e
    p e
    p e.backtrace
  end
end
